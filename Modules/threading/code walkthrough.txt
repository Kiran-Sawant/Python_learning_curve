line 1:
importing the threading module

line 2:
importing queue module, it can be used for multicreative and multi processing tasks.

line 6:
Creating a thread lock. often times a program might require multiple threads to access
a single variable/Database/file. in multithreaded operations there are more than one
instances of the program running in the background working on the target function.
If all those threads access the variable at the same time the data might get courrupted.
eg: lets assume there is a program to count candies. variable x holds the number of candies
and 2 threads find candies and add the number of candies found, to x, if thread-1 finds two
and thread-2 finds 5 and both access x at the same time any one of the values will be actully
added, making the value wrong. A thread-lock prevents that by giving access of the variable to
only one thread at a time. Make sure to use the thread-lock properly by using a context manager
over the statement that modifies the variable.

line 8~14:
Defining the task to be carried out. line 10 simulates a task that takes .5 seconds to complete.
line 13 applies a print lock on the printing operation. line 14 prints the thread and the work
its doing.

line 16~20:
Multi-threaded programs require a target function on which the thread will be applied. Only this
function can use all the threads (10 in our case). The while loop makes sure that once a thread
complets its task, it comes back to pick up another task. Loop terminates when all tasks are done.
line-18 pops out a task from the queue, line-19 executing the main task, line-20 Queue().task_done()
terminates the task, once the task is terminated the thread carring out the task returnes to get
a new task.

line-23:
Creating a Queue object.

line 26~29:
Creating 10 threads and giving them a target function threader, we set daemon=True for these threads
There are 2 types of threads, daemonic and non-daemonic. daemonic threads die after the main task is
complete; non-daemonic do not. If we do not set daemon=True the program will not terminate. line-29
starts the thread activity.

line 31:
recording start time.

line 34~35:
creating 20 work instances and putting them in queue. what this suite does is that it says that the
main activity(exampleJob) is needed to be done 20 times. Our Queue object contains numbers from 0 to
19 that are basically the identifiers of a task

line 43:
.join() blocks the program from going further until all the tasks in the queue are finished.

Program flow:
Program imports all the modules. Creates a thread-lock object, creates a queue object which is empty
for now. Creats 10 threads giving a target function 'threader' to all of them and starts them all, just
because they are started does not mean they will execute the function cuz que.get() on line 18 returns
nothing. Program records time on line 31. It fills the Queue with 20 tasks and now the threader function
starts executing. Remember there are 10 threads doing 20 tasks ie. there is one task(exampleJob) needed
to be one 20 times and there are 10 threads that can do it, therefore every thread will do the task twice.
The task takes 0.5 seconds to execute once, if there are 10 threads, each doing it twice, the task should
take roughly 1 seconds, which if done linearly(without threads), would take 10 seconds.
using the Queue object is important in this program, as it provids locking mechanism. The Queue.put() and
Queue.get() methods do not let more than one thread access the queue. Threads can become competitive for
resources, ie. two or more threads might want to pop same value out of an array, therefore it is necessary
to have a locking mechanism that prohibits threads. Queue.task_done() indicates that the task that was poped
using .get() method is finished, every .get() method must be accompained with a .task_done() method.
Once all the tasks are done the Program moves beyond Queue.join() method and executes further code.
